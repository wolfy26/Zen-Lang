00 -> push_const   [const_index]                          -> add constant to stack
01 -> push_name    [name_index] [scoping]                 -> add value of variable to stack
02 -> def_name     [name_index] [scoping]                 -> define variable with value on stack, add value to stack
03 -> set_name     [name_index] [scoping]                 -> set variable to value on stack
04 -> add                                                 -> add two values on stack
05 -> sub                                                 -> (second-to-top value on stack) minus (top value on stack)
06 -> mult                                                -> multiply two values on stack
07 -> div_norm                                            -> (second-to-top value on stack) divided by (top value on stack)
08 -> div_floor                                           -> (second-to-top value on stack) integer divide (top value on stack)
09 -> pow                                                 -> raise second-to-top value on stack to top value on stack
0a -> mod                                                 -> (second-to-top value on stack) mod (top value on stack)
0b -> make_name    [name_index] [scoping]                 -> create variable with no value
0c -> call_func    [func_index] [num_args] [scoping]      -> call function, pop arguments off stack
0d -> print        [num_args]                             -> special print function, pop arguments off stack (discards top element)
0e -> println      [num_args]                             -> same as print, except prints with new line (discards top element)
0f -> return                                              -> return top value on stack
10 -> jump_false   [index]                                -> if top value on stack is false, jump to index
11 -> jump_true    [index]                                -> if top value on stack is true, jump to index
12 -> goto         [index]                                -> go to index, enter parent scope
13 -> less                                                -> second-to-top value on stack less than top value on stack
14 -> less_eq                                             -> second-to-top value on stack less than or equals top value on stack
15 -> greater                                             -> second-to-top value on stack greater than top value on stack
16 -> greater_eq                                          -> second-to-top value on stack greater than or equals top value on stack
17 -> equals                                              -> second-to-top value on stack equals top value on stack
18 -> not_eq                                              -> second-to-top value on stack not equals top value on stack
19 -> add_name     [name_index] [scoping]                 -> add top value of stack to variable
1a -> sub_name     [name_index] [scoping]                 -> subtract top value of stack from variable
1b -> mult_name    [name_index] [scoping]                 -> multiply top value of stack with variable
1c -> divn_name    [name_index] [scoping]                 -> divide top value of stack into variable
1d -> divf_name    [name_index] [scoping]                 -> floor divide top value of stack into variable
1e -> pow_name     [name_index] [scoping]                 -> raise variable to top value of stack
1f -> mod_name     [name_index] [scoping]                 -> (variable) % (top value on stack), scoping
20 -> goto_scope   [scope_index]                          -> enter child scope
21 -> goto_parent                                         -> enter parent scope
22 -> def_func     [name_index] [func_index] [scoping]    -> define function
